using MapWinGIS;
using OMEGA.Data_Classes;
using OMEGA.SQLQuery;
using OMEGA.SQLQuery.SpecificQueryBuilder;
using System;
using System.Collections.Generic;
using System.Data;
using System.Data.SQLite;
using System.Drawing;
using System.Windows.Forms;

namespace OMEGA.Forms
{
    /// <summary>
    /// Exploitation Main form : fenêtre avec les onglets de caractérisation d'une exploitation
    /// </summary>
    internal partial class ExploitationMainForm : Form
    {
        internal Produit Produit { get; set; }
        internal Charge Charge { get; set; }
        internal Externalite Externalite { get; set; }
        internal Periode Periode { get; set; }
        internal Family Family { get; set; }
        private ListeForm mlisteform;
        private int mIdExp;
        internal event EventHandler<SaveDataEvent> SaveDataProduit;
        internal event EventHandler<SaveDataEvent> SaveDataCharge;
        internal event EventHandler<SaveDataEvent> SaveDataExternalite;
        internal event EventHandler<SaveDataEvent> SaveDataFamily;
        internal event EventHandler<ShowListEvent> ShowList;
        private DataTable ActiviteTable = new DataTable("Activite");
        private int langue = Properties.Settings.Default.Langue;
        private List<int> ListActToDelete = new List<int>();
      
        /// <summary>
        ///  constructeur si nouvelle exploitation.
        /// </summary>
        internal ExploitationMainForm(string nom)
        {
            try
            {
                InitializeComponent();
                LoadExploitationName(nom);
                label1NomExploitation.Text = nom;
                mIdExp = SaveNewExploitation(nom);
                LoadExploitationMap();
                SetCaption();
                this.Text = Translation.Translate("Farm form", langue);
            }
            catch (Exception e)
            {
                MessageBox.Show(e.Message);
                Log.WriteLog(e.Message, GetType().Name + " . Function :  " + System.Reflection.MethodBase.GetCurrentMethod().Name.ToString());
            }
        }

        /// <summary>
        ///  constructeur si exploitation avec dejà des données
        /// </summary>
        internal ExploitationMainForm(int IdExp)
        {
            try
            {
                InitializeComponent();
                mIdExp = IdExp;
                label1NomExploitation.Text = SQLQueryBuilder.FindName("Exploitation","Nom","ID",mIdExp);
                SetCurrentExploitation();
                LoadExploitationName("");
                LoadExploitationMap();
                SetCaption();
                this.Text = Translation.Translate("Farm form", langue);
            }
             catch (Exception e)
            {
                MessageBox.Show(e.Message);
                Log.WriteLog(e.Message, GetType().Name + " . Function :  " + System.Reflection.MethodBase.GetCurrentMethod().Name.ToString());
            }
        }



        /// <summary>
        /// translation of the form features
        /// </summary>
        private void SetCaption()
        {
            try
            {
                int langue = Properties.Settings.Default.Langue;
                buttonOkGeneral.Text = Translation.Translate("OK", langue);
                buttonCancelGeneral.Text = Translation.Translate("Cancel", langue);
                buttonSAveGeneral.Text = Translation.Translate("Save", langue);
                tabPageGeneral.Text = Translation.Translate("General information", langue);
                tabPageCharges.Text = Translation.Translate("Charges", langue);
                TapPageExternalites.Text = Translation.Translate("Externalites", langue);
                groupBoxGPS.Text = Translation.Translate("Info GPS", langue);
                labelShapefile.Text = Translation.Translate("Shapefile", langue) + ":";
                labelDirShape.Text = Translation.Translate("Directory", langue) + ":";
                buttonAddCharges.Text = Translation.Translate("Add", langue);
                this.Text = Translation.Translate("Activity", langue);
                buttonGroupeC.Text = Translation.Translate("Enable group", langue);
                buttonAddExtern.Text = Translation.Translate("Add", langue);
                buttonaddFamily.Text = Translation.Translate("Add", langue);
                buttonAddActivite.Text = Translation.Translate("Add", langue);
                buttonRemoveCharge.Text = Translation.Translate("Remove", langue);
                buttonRemoveActivite.Text = Translation.Translate("Remove", langue);
                buttonGroupeEx.Text = Translation.Translate("Enable group", langue);
                buttonGroupeF.Text = Translation.Translate("Enable group", langue);
                buttonCancelActivite.Text = Translation.Translate("Cancel", langue);
                buttonDuplicateActivite.Text = Translation.Translate("Duplicate", langue);
                buttonSaveActivite.Text = Translation.Translate("Save", langue);
                buttonListeCharge.Text = Translation.Translate("Costs lists", langue);
                labelPrincipal.Text = Translation.Translate("Main farm", langue);
            }
            catch (Exception Ex)
            {
                MessageBox.Show(Ex.Message);
                Log.WriteLog(Ex.Message, GetType().Name + " . Function :  " + System.Reflection.MethodBase.GetCurrentMethod().Name.ToString());
            }
        }

        private void LoadExploitationMap()
        {
            string query = "Select * From SHP_Info Where IdExploitation = '" + mIdExp + "';";
            List<string> listpath = SQlQueryExecuter.RunQueryReaderStr("path", query);
            List<int> listcolor = SQlQueryExecuter.RunQueryReaderInt("Color_ARGB", query);

            foreach (string path in listpath)
            {
                if (Commun.LoadShapeFile(path))
                {
                    Shapefile ExploitationShapeFile = new Shapefile();
                    ExploitationShapeFile.Open(path);
                    int handler1 = axMap1.AddLayer(ExploitationShapeFile, true);
                    Color color1 = Color.FromArgb(listcolor[listpath.IndexOf(path)]);
                    ExploitationShapeFile.DefaultDrawingOptions.FillColor = Commun.ColorToUInt(color1);
                    axMap1.set_LayerVisible(handler1, true);
                    axMap1.ZoomToMaxVisibleExtents();
                }
                string[] array = path.Split('\\');
                for (int i = 0; i <= array.Length; i++)
                {
                    if (array[i].Contains(".shp"))
                    {
                        textBoxshapefile.Text = array[i];
                        break;
                    }
                }
                textBoxDirection.Text = path.Remove(path.Length - textBoxshapefile.Text.Length, textBoxshapefile.Text.Length);
                textBoxDirection.ReadOnly = true;
                textBoxshapefile.ReadOnly = true;
            }
        }

        private void SetCurrentExploitation()
        {
            try
            {
                string query = "Update Exploitation Set Encours = '0' Where ID <>'" + mIdExp + "';";
                SQlQueryExecuter.RunQueryReader(query);
                query = "Update Exploitation Set Encours = '1' Where ID ='" + mIdExp + "';";
                SQlQueryExecuter.RunQueryReader(query);
            }
            catch (Exception e)
            {
                MessageBox.Show(e.Message);
                Log.WriteLog(e.Message, GetType().Name + " . Function :  " + System.Reflection.MethodBase.GetCurrentMethod().Name.ToString());
            }
        }

        private void LoadChargeGrid()
        {
            try
            {
                string query = ExploitationQuery.LoadChargeToExploitationQuery(mIdExp);
                List<int> ListIdCharge = SQlQueryExecuter.RunQueryReaderInt("ID", query);

                Charge = new Charge(dataGridViewCharge, buttonokCharge,
                    buttonSaveCharge, buttonCancelCharge, buttonRemoveCharge,
                    buttonDuplicateCharge, null, 1, null, ListIdCharge, mIdExp, pictureBoxCharge,this);

                // subscribing to the event
                buttonRemoveCharge.Click += new System.EventHandler(Charge.ButtonRemoveRow);
                buttonDuplicateCharge.Click += new EventHandler(Charge.ButtonDuplicate);
                buttonCancelCharge.Click += new EventHandler(Charge.buttonCancel);
                pictureBoxCharge.Click += new EventHandler(Charge.ExportTable);
                dataGridViewCharge.RowPostPaint += new DataGridViewRowPostPaintEventHandler(Charge.dataGridViewDetailRowPostPaint);
                pictureBoxCharge.MouseLeave += new EventHandler(Charge.pictureBox_MouseLeave);
                pictureBoxCharge.MouseEnter += new EventHandler(Charge.pictureBox_MouseEnter);
                dataGridViewCharge.CellClick += new DataGridViewCellEventHandler(Charge.dataGridView1CellClick);
                buttonGroupeC.Click += new EventHandler(Charge.EnableGroupe);
                buttonPropositionC.Click += new EventHandler(Charge.ButtonPropositionClick);
                SaveDataCharge += new EventHandler<SaveDataEvent>(Charge.ButtonSaveData);
                buttonListeCharge.Click += buttonListeCharge_Click;
                dataGridViewCharge.Sorted += new EventHandler(Charge.dataGridView1_Sorted);
                buttonAddCharges.Click += new EventHandler(Charge.ButtonAdd);
                ShowList += new EventHandler<ShowListEvent>(Liste_Click);
                Charge.SetColor();
            }
            catch (Exception e)
            {
                MessageBox.Show(e.Message);
                Log.WriteLog(e.Message, GetType().Name + " . Function :  " + System.Reflection.MethodBase.GetCurrentMethod().Name.ToString());
            }
            
        }
        private void LoadExternaliteGrid()
        {
            try
            {
                string query = ExploitationQuery.LoadExternalityToExploitationQuery(mIdExp);
                List<int> ListIdExtern = SQlQueryExecuter.RunQueryReaderInt("ID", query);

                Externalite = new Externalite(dataGridViewExtern, buttonokExtern, buttonSaveExtern,
                buttonCancelExtern, buttonRemoveExtern,
                buttonDuplicateExtern, buttonPropoExt, buttonGroupeEx, ListIdExtern, 0,null,this);

                // when the form is loaded, we subscribe to the events 
                buttonRemoveExtern.Click += new EventHandler(Externalite.ButtonRemoveRow);
                buttonDuplicateExtern.Click += new EventHandler(Externalite.ButtonDuplicate);
                buttonCancelExtern.Click += new EventHandler(Externalite.buttonCancel);
                pictureBoxExten.Click += new EventHandler(Externalite.ExportTable);
                pictureBoxExten.MouseLeave += new EventHandler(Externalite.pictureBox_MouseLeave);
                dataGridViewExtern.RowPostPaint += new DataGridViewRowPostPaintEventHandler(Externalite.dataGridViewDetailRowPostPaint);
                buttonPropoExt.Click += new EventHandler(Externalite.ButtonPropositionClick);
                pictureBoxExten.MouseEnter += new EventHandler(Externalite.pictureBox_MouseEnter);
                dataGridViewExtern.CellClick += new DataGridViewCellEventHandler(Externalite.dataGridView1CellClick);
                buttonAddExtern.Click += new EventHandler(Externalite.ButtonAdd);
                dataGridViewExtern.Sorted += new EventHandler(Externalite.dataGridView1_Sorted);
                buttonGroupeEx.Click += new EventHandler(Externalite.EnableGroupe);
                ShowList += new EventHandler<ShowListEvent>(Liste_Click);
                SaveDataExternalite += new EventHandler<SaveDataEvent>(Externalite.ButtonSaveData);
                Externalite.SetColor();
            }
            catch (Exception Ex)
            {
                MessageBox.Show(Ex.Message);
                Log.WriteLog(Ex.Message, GetType().Name + " . Function :  " + System.Reflection.MethodBase.GetCurrentMethod().Name.ToString());
            }
          
        }

        private void LoadExploitationName(string nom = "")
        {
            try
            {
                string query;
                if (nom == "" && mIdExp > 0)
                {
                    query = SQLQueryBuilder.SelectQuery("Exploitation", "Nom", "WHERE ID = '" + mIdExp + "'");
                    List<string> ListField = SQlQueryExecuter.RunQueryReaderStr("Nom", query);
                    if (ListField.Count > 0)
                    {
                        textBoxNom.Text = ListField[0];
                    }
                }
                else
                {
                    textBoxNom.Text = nom;

                }
                query = "Select IdExploitationPrincipale from Exploitation WHere ID  = '" + mIdExp + "'";
                List<int> list = SQlQueryExecuter.RunQueryReaderInt("IdExploitationPrincipale", query);
                if (Commun.ListHasValue(list))
                {
                    if (list[0] == 1)
                    {
                        radioButtonOui.Checked = true;
                        radioButtonNon.Checked = false;
                        comboBoxListeExploi.Enabled = true;
                    }
                    if (list[0] == 0)
                    {
                        radioButtonOui.Checked = false;
                        radioButtonNon.Checked = true;
                        comboBoxListeExploi.Enabled = false;
                    }
                }
                else
                {
                    radioButtonOui.Checked = true;
                    radioButtonNon.Checked = false;
                    comboBoxListeExploi.Enabled = false;
                }

            }
            catch (Exception Ex)
            {
                MessageBox.Show(Ex.Message);
                Log.WriteLog(Ex.Message, GetType().Name + " . Function :  " + System.Reflection.MethodBase.GetCurrentMethod().Name.ToString());
            }
        }

        
        private void LoadActiviteGrid()
        {
            try
            {
                ActiviteTable.Clear();
                string query = ExploitationQuery.LoadActivityToExploitationQuery(mIdExp);
                SQLiteDataAdapter adapter = new SQLiteDataAdapter(new SQLiteCommand(query, new SQLiteConnection(Properties.Settings.Default.ConnectionString)));
                adapter.Fill(ActiviteTable);
                dataGridViewActivite.DataSource = ActiviteTable;
                ShowList += new EventHandler<ShowListEvent>(Liste_Click);
                TranslateType();
            }
            catch (Exception Ex)
            {
                MessageBox.Show(Ex.Message);
                Log.WriteLog(Ex.Message, GetType().Name + " . Function :  " + System.Reflection.MethodBase.GetCurrentMethod().Name.ToString());
            }
        }


        private void TranslateType()
        {
            try
            {
                for (int i = 0;i < dataGridViewActivite.Rows.Count;i++)
                {
                    dataGridViewActivite.Rows[i].Cells[2].Value = Translation.Translate(dataGridViewActivite.Rows[i].Cells[2].Value.ToString(), langue);
                }

            }
            catch (Exception Ex)
            {
                MessageBox.Show(Ex.Message);
                Log.WriteLog(Ex.Message, GetType().Name + " . Function :  " + System.Reflection.MethodBase.GetCurrentMethod().Name.ToString());
            }
        }



        private void LoadFamilyGrid()
        {
            try
            {
                string query = ExploitationQuery.LoadFamilyToExploitationQuery(mIdExp);
                List<int> ListIdFamily = SQlQueryExecuter.RunQueryReaderInt("ID", query);

                Family = new Family(dataGridViewFamily, buttonaddFamily, buttonremoveFamily, buttonduplicatefamily,
                    buttonOKFamily, buttonsavefamily, panelfamily, buttoncancelfamily,
                    ListIdFamily,buttonGroupeF,buttonPropositionF, mIdExp, pictureBoxfamille);

                // when the form is loaded, we subscribe to the events 
                buttonremoveFamily.Click += new EventHandler(Family.ButtonRemoveClick);
                buttonduplicatefamily.Click += new EventHandler(Family.ButtonDuplicateClick);
                buttoncancelfamily.Click += new EventHandler(Family.ButtonCancelClick);
                pictureBoxfamille.Click += new EventHandler(Family.ButtonExportClick);
                pictureBoxfamille.MouseEnter += new EventHandler(Family.pictureBox_MouseEnter);
                pictureBoxfamille.MouseLeave += new EventHandler(Family.pictureBox_MouseLeave);
                dataGridViewFamily.CellClick += new DataGridViewCellEventHandler(Family.dataGridView1CellClick);
                dataGridViewFamily.CellEndEdit += new DataGridViewCellEventHandler(Family.dataGridView1CellEndEdit);
                dataGridViewFamily.EditingControlShowing += new DataGridViewEditingControlShowingEventHandler(Family.dataGridView1EditingControlShowing);
                buttonListeF.Click += buttonListeF_Click;
                dataGridViewFamily.RowPostPaint += new DataGridViewRowPostPaintEventHandler(Family.dataGridViewDetailRowPostPaint);
                 ShowList += new EventHandler<ShowListEvent>(Liste_Click);
                buttonOKFamily.Click += buttonOkFamily_Click;
                buttonGroupeF.Click += new EventHandler(Family.EnableGroupe);
                buttonPropositionF.Click += new EventHandler(Family.ButtonPropositionClick);
                //buttonsavefamily.Click += buttonsavefamily_Click;
                dataGridViewFamily.Sorted += new EventHandler(Family.dataGridView1_Sorted);
                SaveDataFamily += new EventHandler<SaveDataEvent>(Family.ButtonSaveClick);
                buttonaddFamily.Click += new EventHandler(Family.ButtonAddClick);
                Family.SetColor();

            }
            catch (Exception Ex)
            {
                MessageBox.Show(Ex.Message);
                Log.WriteLog(Ex.Message, GetType().Name + " . Function :  " + System.Reflection.MethodBase.GetCurrentMethod().Name.ToString());
            }

        }
        private void ExploitationMainForm_Load(object sender, EventArgs e)
        {
            try
            {
                // sur le load du controlTab, on crée un nouvelle event qui aura lieu à chaque changement de selection d'un onglet
                tabGeneral.Selecting += new TabControlCancelEventHandler(tabControlGeneral_Selecting);

            }
            catch (Exception Ex)
            {
                MessageBox.Show(Ex.Message);
                Log.WriteLog(Ex.Message, GetType().Name + " . Function :  " + System.Reflection.MethodBase.GetCurrentMethod().Name.ToString());
            }

        }

        private void tabControlGeneral_Selecting(object sender, TabControlCancelEventArgs e)
        {
            try
            { 
                TabPage currentTab = (sender as TabControl).SelectedTab;
                currentTab.BringToFront();
                switch (currentTab.Name)
                {
                    case "tabPageActivites":
                        LoadActiviteGrid();
                        break;
                    case "tabPageCharges":
                        LoadChargeGrid();
                        break;
                    case "Information General":
                        break;
                    case "TapPageExternalites":
                        LoadExternaliteGrid();
                        break;
                    case "tabFamily":
                        LoadFamilyGrid();
                        break;
                }
            }
            catch (Exception Ex)
            {
                MessageBox.Show(Ex.Message);
                Log.WriteLog(Ex.Message, GetType().Name + " . Function :  " + System.Reflection.MethodBase.GetCurrentMethod().Name.ToString());
            }
        }

        /// <summary>
        /// SAuvegardes des données écrites pas l'utilisateurs
        /// </summary>
        /// <param name="Table"></param>
        /// <param name="ListToDelete"></param>
        /// <param name="MylistC"></param>
        /// <param name="MylistP"></param>
        /// <param name="MylistEx"></param>
        private void SaveDataExploitation(string Table, List<int> ListToDelete,
            DataGridView dataGridViewC = null, DataGridView dataGridViewP = null,
            Dictionary<int, InfoUserExternalite> MylistEx = null, DataGridView dataGridViewF = null)
        {
            try
            {
                string idTable = "";
                switch (Table)
                {
                    case "Charges":
                        idTable = "IdCharges";
                        foreach (DataGridViewRow row in dataGridViewC.Rows)
                        {
                            int.TryParse(row.Cells[Charge.GetNumColonneId()].Value.ToString(), out int ID);
                            string query = SQLQueryBuilder.SelectQuery("Caract_Exploitation ", "IdExploitation", "WHERE " + idTable + " = '" + ID + "' AND IdExploitation = '" + mIdExp + "'");
                            List<string> ListField = SQlQueryExecuter.RunQueryReaderStr("IdExploitation", query);
                            if (ListField.Count == 0)
                            {
                                query = SQLQueryBuilder.SaveExploitationDataQuery(idTable, mIdExp, ID);
                                SQlQueryExecuter.RunQuery(query);
                            }
                            SaveOnAgriCharge(ID);
                        }
                        break;
                    case "Produits":
                        idTable = "IdProduits";
                        foreach (int index in ListToDelete)
                        {
                            string query = SQLQueryBuilder.DeleteQuery(index, "Caract_Exploitation", "IdProduits");
                            SQlQueryExecuter.RunQuery(query);
                        }
                        foreach (DataGridViewRow row in dataGridViewP.Rows)
                        {
                            int.TryParse(row.Cells[Produit.GetNumColonneId()].Value.ToString(), out int ID);
                            string query = SQLQueryBuilder.SelectQuery("Caract_Exploitation ", "IdExploitation", "WHERE " + idTable + " = '" + ID + "' AND IdExploitation = '" + mIdExp + "'");
                            List<string> ListField = SQlQueryExecuter.RunQueryReaderStr("IdActivite", query);
                            if (ListField.Count == 0)
                            {
                                query = "INSERT INTO Caract_Exploitation (IdExploitation,IdProduits) " +
                                    "VALUES ( '" + mIdExp + "','" + ID + "');";
                                SQlQueryExecuter.RunQuery(query);
                            }
                        }
                        break;
                    case "Externalites":
                        idTable = "IdExternalites";
                        foreach (KeyValuePair<int, InfoUserExternalite> item in MylistEx)
                        {
                            string query = SQLQueryBuilder.SelectQuery("Caract_Exploitation ", "IdExploitation", "WHERE " + idTable + " = '" + item.Value.ID + "' AND IdExploitation = '"+mIdExp+"'");
                            List<string> ListField = SQlQueryExecuter.RunQueryReaderStr("IdExploitation", query);
                            if (ListField.Count == 0)
                            {
                                query = SQLQueryBuilder.SaveExploitationDataQuery(idTable, mIdExp, item.Value.ID);
                                SQlQueryExecuter.RunQuery(query);
                            }
                        }
                        break;
                }
                foreach (int index in ListToDelete)
                {
                    string query = SQLQueryBuilder.DeleteQuery(index, "Caract_Exploitation", idTable);
                    SQlQueryExecuter.RunQuery(query);
                    if (idTable == "IdCharges") DeleteOnAgriCharge(index);
                }
                if (Text.Contains("*"))
                {
                    Text = Text.Substring(Text.Length - 1, 1);
                }
            }
            catch (Exception Ex)
            {
                MessageBox.Show(Ex.Message);
                Log.WriteLog(Ex.Message, GetType().Name + ". Function :  "  + System.Reflection.MethodBase.GetCurrentMethod().Name.ToString());
            }
        }

        private void DeleteOnAgriCharge(int IdCharge)
        {
            string query = SQLQueryBuilder.DeleteQuery("Agri_Charge","Where IdCharges ='" + IdCharge + "'");
            SQlQueryExecuter.RunQuery(query);
        }

        private void SaveOnAgriCharge(int idCharge)
        {
            string query = "Select * From Agri_Charges Where IdExploitations = '" + mIdExp + "' AND IdCharges ='"+idCharge+"';";
            List<int> list = SQlQueryExecuter.RunQueryReaderInt("ID", query);
            if (!Commun.ListHasValue(list))
            {
                query = "insert into Agri_Charges (IdExploitations,IdCharges) VALUES ('" + mIdExp + "','" + idCharge + "');";
                SQlQueryExecuter.RunQuery(query);
            }
        }

        private int SaveNewExploitation(string nom)
        {
            int id=0;
            try
            {
                string query = ExploitationQuery.SaveExploitationQuery(id, nom, 1);
                SQlQueryExecuter.RunQueryReader(query);

                query = ExploitationQuery.SaveExploitationQuery(id, nom, 2);
                List<string> ListField = SQlQueryExecuter.RunQueryReaderStr("ID", query);
                if (ListField.Count > 0)
                {
                    int.TryParse(ListField[0], out id);
                }

                query = ExploitationQuery.SaveExploitationQuery(id, nom,3);
                List<int> list = SQlQueryExecuter.RunQueryReaderInt("ID", query);
                if (!Commun.ListHasValue(list))
                {
                    query = ExploitationQuery.SaveExploitationQuery(id, nom, 4);
                    SQlQueryExecuter.RunQueryReader(query);
                }

                query = SQLQueryBuilder.SelectQuery("Classifications", "Distinct Groupe");
                List<string> list2 = SQlQueryExecuter.RunQueryReaderStr("Groupe", query);
                int index = 1;
                foreach (string item in list2)
                {
                    query = "Update Caract_classifications Set Classification_" + index + "='" + item +
                   "' Where Idexploitation = '" + id + "';";
                    SQlQueryExecuter.RunQueryReader(query);
                    index++;
                }

                query = ExploitationQuery.SaveExploitationQuery(id, nom, 5);
                SQlQueryExecuter.RunQuery(query);
            }
            catch (Exception Ex)
            {
                MessageBox.Show(Ex.Message);
                Log.WriteLog(Ex.Message, GetType().Name + " . Function :  "  + System.Reflection.MethodBase.GetCurrentMethod().Name.ToString());
            }
            return id;

        }
           
        /// <summary>
        /// retourne l'IDtype de l'exploitation courante
        /// </summary>
        /// <returns></returns>
        private int GetIdType()
        {
            int idtype=0;
            try
            {
                string query = SQLQueryBuilder.SelectQuery("Caract_Exploitation", "IdType" ,"WHERE IdExploitation = '" + mIdExp + "'");
                List<string> ListField = SQlQueryExecuter.RunQueryReaderStr("IdType", query);
                if (ListField.Count > 0)
                {
                    int.TryParse(ListField[0], out idtype);
                }
            }
            catch (Exception Ex)
            {
                MessageBox.Show(Ex.Message);
                Log.WriteLog(Ex.Message, GetType().Name + " . Function :  "  + System.Reflection.MethodBase.GetCurrentMethod().Name.ToString());
            }
            return idtype;
           
        }

        private void Liste_Click(object sender, ShowListEvent e)
        {
            try
            {
                if (mlisteform == null)
                {
                    mlisteform = new ListeForm(e.query, e.table, e.currentTab, e.activity, e.exploitation, e.currentGridView, e.currentDataTable);
                    mlisteform.Show();
                }
                else if (mlisteform.Visible == false)
                {
                    mlisteform = new ListeForm(e.query, e.table, e.currentTab, e.activity, e.exploitation, e.currentGridView, e.currentDataTable);
                    mlisteform.Show();
                }
                else mlisteform.BringToFront();
            }
            catch (Exception Ex)
            {
                MessageBox.Show(Ex.Message);
                Log.WriteLog(Ex.Message, GetType().Name + " . Function :  "  + System.Reflection.MethodBase.GetCurrentMethod().Name.ToString());
            }

        }

        #region GUI

        private void buttonokCharge_Click(object sender, EventArgs e)
        {
            try
            {
                buttonSaveCharge_Click(sender, e);
                this.Close();
            }
            catch (Exception Ex)
            {
                MessageBox.Show(Ex.Message);
                Log.WriteLog(Ex.Message, GetType().Name + " . Function :  " + System.Reflection.MethodBase.GetCurrentMethod().Name.ToString());
            }
           
        }
        private void buttonOkFamily_Click(object sender, EventArgs e)
        {
            try
            {
                SaveDataFamily?.Invoke(this, new SaveDataEvent(false, "Exploitation"));
                //SaveDataExploitation("Family", Family.ListeRecordToDelete, null, null, null, Family.mDataGridView);
                Family.RefreshView();
                //this.Close();
            }
            catch (Exception Ex)
            {
                MessageBox.Show(Ex.Message);
                Log.WriteLog(Ex.Message, GetType().Name + " . Function :  " + System.Reflection.MethodBase.GetCurrentMethod().Name.ToString());
            }
        }

        private void buttonOkProduit_Click(object sender, EventArgs e)
        {
            try
            {
                buttonSaveProduit_Click(sender, e);
                this.Close();
            }
            catch (Exception Ex)
            {
                MessageBox.Show(Ex.Message);
                Log.WriteLog(Ex.Message, GetType().Name + " . Function :  " + System.Reflection.MethodBase.GetCurrentMethod().Name.ToString());
            }
        }

        private void buttonokExtern_Click(object sender, EventArgs e)
        {
            try
            {
                buttonSaveExtern_Click(sender, e);
                this.Close();
            }
            catch (Exception Ex)
            {
                MessageBox.Show(Ex.Message);
                Log.WriteLog(Ex.Message, GetType().Name + " . Function :  " + System.Reflection.MethodBase.GetCurrentMethod().Name.ToString());
            }
        }

        private void buttonsavefamily_Click(object sender, EventArgs e)
        {
            try
            {
                SaveDataFamily?.Invoke(this, new SaveDataEvent(false, "Exploitation"));
                Family.RefreshView();
            }
            catch (Exception Ex)
            {
                MessageBox.Show(Ex.Message);
                Log.WriteLog(Ex.Message, GetType().Name + " . Function :  " + System.Reflection.MethodBase.GetCurrentMethod().Name.ToString());
            }

        }

        private void buttonSaveExtern_Click(object sender, EventArgs e)
        {
            try
            {
                SaveDataExternalite?.Invoke(this, new SaveDataEvent(false, "Exploitation"));
                SaveDataExploitation("Externalites", Externalite.ListeRecordToDelete, null, null, Externalite.DicoInfoUserExternalite);
                Externalite.RefreshView("Exploitation");
            }
            catch (Exception Ex)
            {
                MessageBox.Show(Ex.Message);
                Log.WriteLog(Ex.Message, GetType().Name + " . Function :  " + System.Reflection.MethodBase.GetCurrentMethod().Name.ToString());
            }
            
        }

        private void buttonSaveCharge_Click(object sender, EventArgs e)
        {
            try
            {
                SaveDataCharge?.Invoke(this, new SaveDataEvent(false, "Exploitation"));
                SaveDataExploitation("Charges", Charge.ListeRecordToDelete, Charge.DataGridView, null, null);
                Charge.RefreshView("Exploitation");
            }
            catch (Exception Ex)
            {
                MessageBox.Show(Ex.Message);
                Log.WriteLog(Ex.Message, GetType().Name + " . Function :  " + System.Reflection.MethodBase.GetCurrentMethod().Name.ToString());
            }
        }

        private void buttonSaveProduit_Click(object sender, EventArgs e)
        {
            try
            {
                SaveDataProduit?.Invoke(this, new SaveDataEvent(false, "Exploitation"));
                SaveDataExploitation("Produits", Produit.ListeRecordToDelete, null, Produit.mDataGridView, null);
                Produit.RefreshView("Exploitation");
            }
            catch (Exception Ex)
            {
                MessageBox.Show(Ex.Message);
                Log.WriteLog(Ex.Message, GetType().Name + " . Function :  " + System.Reflection.MethodBase.GetCurrentMethod().Name.ToString());
            }
           
        }
        private void buttonListExt_Click(object sender, EventArgs e)
        {
            try
            {
                string query = SQLQueryBuilder.SelectQuery("Externalites", "ID,Nom");
                ShowList?.Invoke(this, new ShowListEvent("Externalites", query, "TabExternalites", null, this, dataGridViewExtern));

            }
            catch (Exception Ex)
            {
                MessageBox.Show(Ex.Message);
                Log.WriteLog(Ex.Message, GetType().Name + " . Function :  " + System.Reflection.MethodBase.GetCurrentMethod().Name.ToString());
            }
        }

        private void buttonListeCharge_Click(object sender, EventArgs e)
        {
            try
            {
                string query = SQLQueryBuilder.SelectQuery("Charges", "ID,Nom","Where Structurelle = '1'");
                ShowList?.Invoke(this, new ShowListEvent("Charges", query, "Charges", null, this, dataGridViewCharge));
            }
            catch (Exception Ex)
            {
                MessageBox.Show(Ex.Message);
                Log.WriteLog(Ex.Message, GetType().Name + " . Function :  " + System.Reflection.MethodBase.GetCurrentMethod().Name.ToString());
            }
            
        }
      
        private void buttonListeF_Click(object sender, EventArgs e)
        {
            try
            {
                string query = SQLQueryBuilder.SelectQuery("Family", "ID,Nom");
                ShowList?.Invoke(this, new ShowListEvent("Family", query, "TabFamily", null, this, dataGridViewFamily));
            }
            catch (Exception Ex)
            {
                MessageBox.Show(Ex.Message);
                Log.WriteLog(Ex.Message, GetType().Name + " . Function :  " + System.Reflection.MethodBase.GetCurrentMethod().Name.ToString());
            }
            
        }
        #endregion

        protected override bool ProcessDialogKey(Keys keyData)
        {
            try
            { 
                if (Periode!= null )
                {
                    if (Periode.DataGridViewPeriodeDetail.ReadOnly == true && Periode.DataGridViewPeriodeDetail.Visible == true)
                    {
                        switch (keyData)
                        {
                            case Keys.D0:
                                return false;
                            case Keys.NumPad0:
                                return false;
                            case Keys.D1:
                                return false;
                            case Keys.NumPad1:
                                return false;
                            case Keys.D2:
                                return false;
                            case Keys.NumPad2:
                                return false;
                            case Keys.D3:
                                return false;
                            case Keys.NumPad3:
                                return false;
                            case Keys.D4:
                                return false;
                            case Keys.NumPad4:
                                return false;
                            case Keys.D5:
                                return false;
                            case Keys.NumPad5:
                                return false;
                            case Keys.D6:
                                return false;
                            case Keys.NumPad6:
                                return false;
                            case Keys.D7:
                                return false;
                            case Keys.NumPad7:
                                return false;
                            case Keys.D8:
                                return false;
                            case Keys.NumPad8:
                                return false;
                            case Keys.D9:
                                return false;
                            case Keys.NumPad9:
                                return false;
                            default:
                                return true;
                        }
                    }
                    // return the key to the base class if not used.
                }
            }
            catch (Exception Ex)
            {
                MessageBox.Show(Ex.Message);
                Log.WriteLog(Ex.Message, GetType().Name + " . Function :  " + System.Reflection.MethodBase.GetCurrentMethod().Name.ToString());
            }
            return base.ProcessDialogKey(keyData);
        }
     
        private void dataGridViewActivite_CellClick(object sender, DataGridViewCellEventArgs e)
        {
            try
            {
                if (e.ColumnIndex < 0) return;
                if (e.RowIndex < 0) return;
                int idAct;
                int.TryParse(dataGridViewActivite.CurrentRow.Cells[0].Value.ToString(), out idAct);
                ActivityMainForm activity = new ActivityMainForm(idAct);
                activity.ShowDialog();
            }
            catch (Exception Ex)
            {
                MessageBox.Show(Ex.Message);
                Log.WriteLog(Ex.Message, GetType().Name + " . Function :  " + System.Reflection.MethodBase.GetCurrentMethod().Name.ToString());
            }
        }

        private void buttonAddActivite_Click(object sender, EventArgs e)
        {
            try
            {
                CurrencyManager currencyManager = (CurrencyManager)BindingContext[dataGridViewActivite.DataSource];
                // on ajoute une ligne dans le gridview
                currencyManager.SuspendBinding();
                currencyManager.AddNew();
            }
            catch (Exception Ex)
            {
                MessageBox.Show(Ex.Message);
                Log.WriteLog(Ex.Message, GetType().Name + " . Function :  "  + System.Reflection.MethodBase.GetCurrentMethod().Name.ToString());
            }
        }

        private void dataGridViewActivite_CellValueChanged(object sender, DataGridViewCellEventArgs e)
        {
            try
            {
                if (e.ColumnIndex == 2) return;
            // si on est sur la colonne nom qui vient d'être ajouté
                if (dataGridViewActivite.CurrentRow.Index == e.RowIndex)
                {
                    ActivityMainForm activity = new ActivityMainForm(dataGridViewActivite.Rows[e.RowIndex].Cells[e.ColumnIndex].Value.ToString());
                    activity.ShowDialog();
                }
            }
            catch (Exception Ex)
            {
                MessageBox.Show(Ex.Message);
                Log.WriteLog(Ex.Message, GetType().Name + " . Function :  " + System.Reflection.MethodBase.GetCurrentMethod().Name.ToString());
            }
        }

        private void radioButtonOui_CheckedChanged(object sender, EventArgs e)
        {
            try
            { 
                string query = "update Exploitation set principale = '1' Where ID = '"+mIdExp+"';";
                SQlQueryExecuter.RunQuery(query);
                comboBoxListeExploi.Enabled = false;
            }
            catch (Exception Ex)
            {
                MessageBox.Show(Ex.Message);
                Log.WriteLog(Ex.Message, GetType().Name + " . Function :  " + System.Reflection.MethodBase.GetCurrentMethod().Name.ToString());
            }
        }

        private void radioButtonNon_CheckedChanged(object sender, EventArgs e)
        {
            try
            { 
                string query = "update Exploitation set principale = '0' Where ID = '" + mIdExp + "';";
                SQlQueryExecuter.RunQuery(query);
                comboBoxListeExploi.Enabled = true;
                LoadCombox();
            }
            catch (Exception Ex)
            {
                MessageBox.Show(Ex.Message);
                Log.WriteLog(Ex.Message, GetType().Name + " . Function :  " + System.Reflection.MethodBase.GetCurrentMethod().Name.ToString());
            }
        }

        private void LoadCombox()
        {
            try
            { 
                string query = SQLQueryBuilder.SelectQuery("Exploitation", "Nom");
                List<string>  list = SQlQueryExecuter.RunQueryReaderStr("Nom", query);
                comboBoxListeExploi.DataSource = list;
            }
            catch (Exception Ex)
            {
                MessageBox.Show(Ex.Message);
                Log.WriteLog(Ex.Message, GetType().Name + " . Function :  " + System.Reflection.MethodBase.GetCurrentMethod().Name.ToString());
            }
        }

        private void comboBoxListeExploi_SelectedIndexChanged(object sender, EventArgs e)
        {
            try
            { 
                int  id = SQLQueryBuilder.FindId("Exploitation", "ID", "Nom", comboBoxListeExploi.Text);
                string query = "update Exploitation set IdExploitationPrincipale = '"+ id + "' Where ID = '" + mIdExp + "';";
                SQlQueryExecuter.RunQuery(query);
                
            }
            catch (Exception Ex)
            {
                MessageBox.Show(Ex.Message);
                Log.WriteLog(Ex.Message, GetType().Name + " . Function :  " + System.Reflection.MethodBase.GetCurrentMethod().Name.ToString());
            }
        }

        private void buttonNotes_Click(object sender, EventArgs e)
        {
            try
            {
                NotesForm form = new NotesForm("Exploitations");
                form.ShowDialog();
            }
            catch (Exception Ex)
            {
                MessageBox.Show(Ex.Message);
                Log.WriteLog(Ex.Message, GetType().Name + " . Function :  " + System.Reflection.MethodBase.GetCurrentMethod().Name.ToString());
            }
            
        }

        private void buttonListeActivite_Click(object sender, EventArgs e)
        {
            try
            {
                string query = SQLQueryBuilder.SelectQuery("Activite", "ID,Nom");
                ShowList?.Invoke(this, new ShowListEvent("Activite", query, "TabActivite", null, this, dataGridViewActivite, ActiviteTable));

            }
            catch (Exception Ex)
            {
                MessageBox.Show(Ex.Message);
                Log.WriteLog(Ex.Message, GetType().Name + " . Function :  " + System.Reflection.MethodBase.GetCurrentMethod().Name.ToString());
            }
        }

        private void buttonSaveActivite_Click(object sender, EventArgs e)
        {
            try
            { 
                foreach (DataGridViewRow row in dataGridViewActivite.Rows)
                {
                    int IdAct;
                    int.TryParse(row.Cells[0].Value.ToString(), out  IdAct);
                    string query = "SELECT IdExploitation FROM Caract_Exploitation WHERE IdActivite ='" + IdAct +
                         "' AND IdExploitation  = '" + mIdExp + "';";
                    List<string> ListField = SQlQueryExecuter.RunQueryReaderStr("IdExploitation", query);
                    if (ListField.Count == 0)
                    {
                        query = "INSERT INTO Caract_Exploitation (IdExploitation,IdActivite) " +
                            "VALUES ('" + mIdExp + "','" + IdAct + "');";
                        SQlQueryExecuter.RunQuery(query);
                    }

                    SaveOnOtherTable(row, IdAct);

                    foreach (int id in ListActToDelete)
                    {
                        if (id == IdAct)   
                        {
                            query = SQLQueryBuilder.DeleteQuery(id, "Caract_Exploitation","IdActivite");
                            SQlQueryExecuter.RunQuery(query);
                            DeleteOnOtherTable(row,id);
                            break;
                        }
                    }
                }
            }
            catch (Exception Ex)
            {
                MessageBox.Show(Ex.Message);
                Log.WriteLog(Ex.Message, GetType().Name + " . Function :  " + System.Reflection.MethodBase.GetCurrentMethod().Name.ToString());
            }
        }
        
        private void SaveOnOtherTable(DataGridViewRow row,int IdAct)
        {
            try
            {
                string type = row.Cells[2].Value.ToString();
                string query = "";
                List<int> list = new List<int>();
                if (type == Translation.Translate("Crop", langue) || type == "Crop")
                {
                    // save activity on agri_assol
                    query = "Select * From Agri_Assol where IdActivite = '" + IdAct + "' and IdExploitations = '"+mIdExp+"';";
                    list = SQlQueryExecuter.RunQueryReaderInt("IdActivite", query);
                    if (!Commun.ListHasValue(list))
                    {
                        query = "Insert into Agri_Assol (IdActivite,IdExploitations) " +
                            " VALUES ('" + IdAct + "','" + mIdExp + "');";
                        SQlQueryExecuter.RunQuery(query);
                    }

                }
                if (type == Translation.Translate("Perenial", langue) || type == "Perenial")
                {

                    // save activity on agri_perenne
                    query = "Select * From Agri_Perenne where IdActivite = '" + IdAct + "' and IdExploitations = '" + mIdExp + "';";
                    list = SQlQueryExecuter.RunQueryReaderInt("IdActivite", query);
                    if (!Commun.ListHasValue(list))
                    {
                        query = "Insert into Agri_Perenne (IdActivite,IdExploitations) " +
                            " VALUES ('" + IdAct + "','" + mIdExp + "');";
                        SQlQueryExecuter.RunQuery(query);
                    }
                }
                if (type == Translation.Translate("Pluriannual", langue) || type == "Pluriannual")
                {
                    // save activity on agri_pluriannual
                    query = "Select * From Agri_Pluriannual where IdActivite = '" + "' and IdExploitations = '" + mIdExp + "';";
                    list = SQlQueryExecuter.RunQueryReaderInt("IdActivte", query);
                    if (!Commun.ListHasValue(list))
                    {
                        query = "Insert into Agri_Pluriannual (IdActivite,IdExploitation) " +
                            " VALUES ('" + IdAct + "','" + mIdExp + "');";
                        SQlQueryExecuter.RunQuery(query);
                    }
                }
                if (type == Translation.Translate("Animals", langue) || type == "Animals")
                {

                    // save activity on agri_animaux
                    query = "Select * From Agri_Animaux where IdActivite = '" + "' and IdExploitations = '" + mIdExp + "';";
                    list = SQlQueryExecuter.RunQueryReaderInt("IdActivite", query);
                    if (!Commun.ListHasValue(list))
                    {
                        query = "Insert into Agri_Animaux (IdActivite,IdExploitations) " +
                            " VALUES ('" + IdAct + "','" + mIdExp + "');";
                        SQlQueryExecuter.RunQuery(query);
                    }
                }
                // save the product of the activity on Agri_Produits
                query = "Select IdProduits From Caract_Activite Where IdActivite = '" + IdAct + "' and IdProduits <> '0';";
                List<int> listIdProd = SQlQueryExecuter.RunQueryReaderInt("IdProduits", query);
                foreach (int idproduit in listIdProd)
                {
                    query = "Select * From Agri_Produits where IdProduits = '" + idproduit + "' AND IdExploitations = '" + mIdExp + "' ;";
                    list = SQlQueryExecuter.RunQueryReaderInt("IdProduits", query);
                    if (!Commun.ListHasValue(list))
                    {
                        query = "Insert into Agri_Produits (IdProduits,IdExploitations) " +
                            " VALUES ('" + idproduit + "','" + mIdExp + "');";
                        SQlQueryExecuter.RunQuery(query);
                    }
                }
                // save the charge of the activity on Agri_Produits
                query = "Select IdCharges From Caract_Activite Where IdActivite = '" + IdAct + "' and IdCharges <> '0';";
                List<int> listIdChar = SQlQueryExecuter.RunQueryReaderInt("IdCharges", query);
                foreach (int idchar in listIdChar)
                {
                    query = "Select * From Agri_Charges where IdCharges = '" + idchar + "' AND IdExploitations = '" + mIdExp + "' ;";
                    list = SQlQueryExecuter.RunQueryReaderInt("IdCharges", query);
                    if (!Commun.ListHasValue(list))
                    {
                        query = "Insert into Agri_Charges (IdCharges,IdExploitations) " +
                            " VALUES ('" + idchar + "','" + mIdExp + "');";
                        SQlQueryExecuter.RunQuery(query);
                    }
                }
            }
            catch (Exception Ex)
            {
                MessageBox.Show(Ex.Message);
                Log.WriteLog(Ex.Message, GetType().Name + " . Function :  " + System.Reflection.MethodBase.GetCurrentMethod().Name.ToString());
            }
        }

        private void DeleteOnOtherTable(DataGridViewRow row,int IdAct)
        {
            string type = row.Cells[2].Value.ToString();
            string query = "";
            if(type == Translation.Translate("Crop", langue) || type == "Crop")
            {
                // save activity on agri_assol
                query = "Select * From Agri_Assol where IdActivite = '" + IdAct + "';";
                List<int> list = SQlQueryExecuter.RunQueryReaderInt("IdActivte", query);
                if (Commun.ListHasValue(list))
                {
                    query = "Delete from Agri_Assol Where IdActivite ='" + IdAct + "' and IdExploitation ='" + mIdExp + "';";
                    SQlQueryExecuter.RunQuery(query);
                }


                // save the product of the activity on Agri_Produits
                query = "Select IdProduits From Caract_Activite Where IdActivite = '" + IdAct + "';";
                int IdProduit = SQlQueryExecuter.RunQueryReaderInt("IdProduits", query)[0];
                query = "Select * From Agri_Produits where IdProduit = '" + IdProduit + "';";
                list = SQlQueryExecuter.RunQueryReaderInt("IdProduits", query);
                if (Commun.ListHasValue(list))
                {
                    query = "Delete from Agri_Produits Where IdProduits ='" + IdProduit + "' and IdExploitation ='" + mIdExp + "';";
                    SQlQueryExecuter.RunQuery(query);
                }
            }
            if (type == Translation.Translate("Perenial", langue) || type == "Perenial")
            {

                // save activity on agri_perenne
                query = "Select * From Agri_Perenne where IdActivite = '" + IdAct + "';";
                List<int> list = SQlQueryExecuter.RunQueryReaderInt("IdActivte", query);
                if (!Commun.ListHasValue(list))
                {
                    query = "Insert into Agri_Perenne (IdActivite,IdExploitation) " +
                        " VALUES ('" + IdAct + "','" + mIdExp + "');";
                }

                // save the product of the activity on Agri_Produits
                query = "Select IdProduits From Caract_Activite Where IdActivite = '" + IdAct + "';";
                int IdProduit = SQlQueryExecuter.RunQueryReaderInt("IdProduits", query)[0];
                query = "Select * From Agri_Produits where IdProduit = '" + IdProduit + "';";
                list = SQlQueryExecuter.RunQueryReaderInt("IdProduits", query);
                if (!Commun.ListHasValue(list))
                {
                    query = "Insert into Agri_Produits (IdProduits,IdExploitation) " +
                        " VALUES ('" + IdProduit + "','" + mIdExp + "');";
                }
            }
            if (type == Translation.Translate("Pluriannual", langue) || type == "Pluriannual")
            {

                // save activity on agri_pluriannual
                query = "Select * From Agri_Pluriannual where IdActivite = '" + IdAct + "';";
                List<int> list = SQlQueryExecuter.RunQueryReaderInt("IdActivte", query);
                if (!Commun.ListHasValue(list))
                {
                    query = "Insert into Agri_Pluriannual (IdActivite,IdExploitation) " +
                        " VALUES ('" + IdAct + "','" + mIdExp + "');";
                }

                // save the product of the activity on Agri_Produits
                query = "Select IdProduits From Caract_Activite Where IdActivite = '" + IdAct + "';";
                int IdProduit = SQlQueryExecuter.RunQueryReaderInt("IdProduits", query)[0];
                query = "Select * From Agri_Produits where IdProduit = '" + IdProduit + "';";
                list = SQlQueryExecuter.RunQueryReaderInt("IdProduits", query);
                if (!Commun.ListHasValue(list))
                {
                    query = "Insert into Agri_Produits (IdProduits,IdExploitation) " +
                        " VALUES ('" + IdProduit + "','" + mIdExp + "');";
                }
            }
            if (type == Translation.Translate("Animals", langue) || type == "Animals")
            {

                // save activity on agri_animaux
                query = "Select * From Agri_Animaux where IdActivite = '" + IdAct + "';";
                List<int> list = SQlQueryExecuter.RunQueryReaderInt("IdActivte", query);
                if (!Commun.ListHasValue(list))
                {
                    query = "Insert into Agri_Animaux (IdActivite,IdExploitation) " +
                        " VALUES ('" + IdAct + "','" + mIdExp + "');";
                }

                // save the product of the activity on Agri_Produits
                query = "Select IdProduits From Caract_Activite Where IdActivite = '" + IdAct + "';";
                int IdProduit = SQlQueryExecuter.RunQueryReaderInt("IdProduits", query)[0];
                query = "Select * From Agri_Produits where IdProduit = '" + IdProduit + "';";
                list = SQlQueryExecuter.RunQueryReaderInt("IdProduits", query);
                if (!Commun.ListHasValue(list))
                {
                    query = "Insert into Agri_Produits (IdProduits,IdExploitation) " +
                        " VALUES ('" + IdProduit + "','" + mIdExp + "');";
                }
            }
        }

        private void buttonOkGeneral_Click(object sender, EventArgs e)
        {
            try
            {
                buttonSAveGeneral_Click(sender, e);
                this.Close();
            }
            catch (Exception Ex)
            {
                MessageBox.Show(Ex.Message);
                Log.WriteLog(Ex.Message, GetType().Name + " . Function :  " + System.Reflection.MethodBase.GetCurrentMethod().Name.ToString());
            }
            
        }

        private void buttonSAveGeneral_Click(object sender, EventArgs e)
        {
            try
            {
                int principale = -1;
                int Idprincipale = 0;
                if (radioButtonNon.Checked)
                {
                    principale = 0;
                    string query2 = "Select ID From Exploitation Where Nom = '" + comboBoxListeExploi.Text + "';";
                    List<int> list = SQlQueryExecuter.RunQueryReaderInt("ID", query2);
                    if (Commun.ListHasValue(list))
                    {
                        Idprincipale = list[0];
                    }
                }
                if (radioButtonOui.Checked)
                {
                    principale = 1;
                }
                if (mIdExp <= 0)
                {
                    string query = "Insert into Exploitation (Nom,Encours,Principale,IdExploitationPrincipale)" +
                        " VALUES ('" + textBoxNom.Text + "','1','" + principale + "','" + Idprincipale + "';);";
                    SQlQueryExecuter.RunQuery(query);
                    mIdExp = Commun.GetMaxId("ID", "Exploitation");
                    query = "Update Activite Set Encours = '0' WHERE ID <> '" + mIdExp + "';";
                    SQlQueryExecuter.RunQuery(query);
                }
                else
                {
                    string query = "Update Exploitation Set Nom = '" + textBoxNom.Text + "'," +
                                   "Principale = '" + principale + "', IdExploitationPrincipale = '" + Idprincipale +
                                   "' WHERE ID = '" + mIdExp + "';";
                    SQlQueryExecuter.RunQuery(query);
                }
                Properties.Settings.Default.DoitSauvegarger = true;
            }
            catch (Exception Ex)
            {
                MessageBox.Show(Ex.Message);
                Log.WriteLog(Ex.Message, GetType().Name + " . Function :  " + System.Reflection.MethodBase.GetCurrentMethod().Name.ToString());
            }
        }

        private void buttonOkActivite_Click(object sender, EventArgs e)
        {
            try
            {
                buttonSaveActivite_Click(sender, e);
                this.Close();
            }
            catch (Exception Ex)
            {
                MessageBox.Show(Ex.Message);
                Log.WriteLog(Ex.Message, GetType().Name + " . Function :  " + System.Reflection.MethodBase.GetCurrentMethod().Name.ToString());
            }
            
        }

        private void buttonCancelActivite_Click(object sender, EventArgs e)
        {
            try
            {
                this.Close();
            }
            catch (Exception Ex)
            {
                MessageBox.Show(Ex.Message);
                Log.WriteLog(Ex.Message, GetType().Name + " . Function :  " + System.Reflection.MethodBase.GetCurrentMethod().Name.ToString());
            }
           
        }

        private void buttonOKFamily_Click_1(object sender, EventArgs e)
        {
            try
            {
           
            }
            catch (Exception Ex)
            {
                MessageBox.Show(Ex.Message);
                Log.WriteLog(Ex.Message, GetType().Name + " . Function :  " + System.Reflection.MethodBase.GetCurrentMethod().Name.ToString());
            }

        }

        private void buttonRemoveActivite_Click(object sender, EventArgs e)
        {
            try
            {
                DataGridViewSelectedRowCollection UserSelectedRow = dataGridViewActivite.SelectedRows;
                foreach (DataGridViewRow row in UserSelectedRow)
                {
                    int index = row.Index;
                    ListActToDelete.Add(GetId(index));
                    dataGridViewActivite.Rows.RemoveAt(index);
                }
            }
            catch (Exception Ex)
            {
                MessageBox.Show(Ex.Message);
                Log.WriteLog(Ex.Message, GetType().Name + " . Function :  " + System.Reflection.MethodBase.GetCurrentMethod().Name.ToString());
            }
        }

        /// <summary>
        /// Retourne l'Id de la ligne envoyée en paramètre
        /// </summary>
        /// <param name="Rowindex"></param>
        /// <returns></returns>
        private int GetId(int Rowindex)
        {
            int id = -1;
            try
            {
                if (dataGridViewActivite.Rows[Rowindex].Cells[0].Value != null)
                {
                    int.TryParse(dataGridViewActivite.Rows[Rowindex].Cells[0].Value.ToString(), out id);
                }
            }
            catch (Exception Ex)
            {
                MessageBox.Show(Ex.Message);
                Log.WriteLog(Ex.Message, GetType().Name + " . Function :  " + System.Reflection.MethodBase.GetCurrentMethod().Name.ToString());
            }
            return id;
        }

        private void Home_Click(object sender, EventArgs e)
        {
            this.Close();
        }

        private void Home_MouseEnter(object sender, EventArgs e)
        {
            Home.BorderStyle = BorderStyle.Fixed3D;
        }

        private void Home_MouseLeave(object sender, EventArgs e)
        {
            Home.BorderStyle = BorderStyle.None;
        }
    }
}
