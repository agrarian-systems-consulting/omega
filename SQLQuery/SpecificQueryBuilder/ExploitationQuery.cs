using System;
using System.Collections.Generic;
using System.Windows.Forms;

namespace OMEGA.SQLQuery.SpecificQueryBuilder
{
    static internal class ExploitationQuery
    {
        
        internal static string LoadGridExploitationQuery()
        {
           string query = "SELECT Exploitation.Id,Exploitation.Nom,TYPE_Exploi.Nom as 'Variante' from Exploitation " +
            "JOIN TYPE_Exploi on TYPE_Exploi.ID = Exploitation.IdType " +
            "UNION ALL SELECT Exploitation.Id,Exploitation.Nom,Exploitation.IdType as 'Type' " +
            "from Exploitation WHERE  Exploitation.IdType is null; ";
            return query;
        }

        internal static string LoadChargeToExploitationQuery(int ID)
        {
            string query = "SELECT distinct Charges.ID From Exploitation " +
                  "JOIN Caract_Exploitation on Caract_Exploitation.IdExploitation = Exploitation.ID " +
                  "JOIN Charges on Charges.ID = Caract_Exploitation.IdCharges " +
                  "WHERE Exploitation.ID = '" + ID + "'; ";
            return query;
        }

        internal static string LoadExternalityToExploitationQuery(int ID)
        {
            string query = "SELECT distinct Externalites.ID From Exploitation " +
                         "JOIN Caract_Exploitation on Caract_Exploitation.IdExploitation = Exploitation.ID " +
                         "JOIN Externalites on Externalites.ID = Caract_Exploitation.IdExternalites " +
                         "WHERE Exploitation.ID = '" + ID + "'; ";
            return query;
        }

        internal static string LoadComboBoxType(int ID)
        {
            string query = "SELECT Type.Nom From Type JOIN Activite ON Activite.IdType = Type.ID WHERE Activite.ID = '" + ID + "'  ;";
            return query;
        }

        internal static string LoadPeriodeToExploitationQuery(int ID)
        {
            string query = "SELECT distinct Def_Calendrier.IdPeriode FROM Def_Calendrier " +
                     "JOIN Caract_Exploitation on Def_Calendrier.IdPeriode = Caract_Exploitation.IdPeriode " +
                    "JOIN Exploitation on Caract_Exploitation.IdPeriode = Exploitation.ID " +
                    "WHERE Exploitation.ID = '" + ID + "'; ";
            return query;
        }

      

        internal static string LoadActivityToExploitationQuery(int ID)
        {
            string query = "SELECT distinct Activite.ID,Activite.Nom,Type.Nom as 'Type' From Exploitation " +
                                 "JOIN Caract_Exploitation on Caract_Exploitation.IdExploitation = Exploitation.ID " +
                                 "JOIN Activite on Activite.ID = Caract_Exploitation.IdActivite " +
                                 "JOIN TYPE on Type.ID = Activite.IdType " +
                                 "WHERE Exploitation.ID = '" + ID + "'; ";
            return query;
        }

        internal static string SaveExploitationQuery(int id,string nom, int numero)
        {
            string query="";
            switch (numero)
            {
                case 1:
                    query = "INSERT INTO Exploitation (nom,Encours) VALUES ('" + nom + "','1') ;";
                    break;
                case 2:
                    query = "SELECT ID FROM Exploitation WHERE nom = '" + nom + "';";
                    break;
                case 3:
                    query = "select ID From Caract_classifications Where Idexploitation = '" + id + "';";
                    break;
                case 4:
                    query = "Insert into Caract_classifications (IdExploitation) Values ('" + id + "');";
                    break;
                case 5:
                    query = "Update Exploitation Set Encours = '0' Where ID <> '" + id + "';";
                    break;

            }

            return query;
        }

        internal static string LoadProductToExploitationQuery(int ID)
        {
            string query = "SELECT distinct Produits.ID From Exploitation " +
                        "JOIN Caract_Exploitation on Caract_Exploitation.IdExploitation = Exploitation.ID " +
                        "JOIN Produits on Produits.ID = Caract_Exploitation.IdProduits " +
                        "WHERE Exploitation.ID = '" + ID + "'; ";
            return query;
        }

        internal static string LoadFamilyToExploitationQuery(int ID)
        {
            string query = "SELECT distinct Family.ID " +
                        " From Family "+
                        " Join Exploitation on Exploitation.Id = Family.IdExploitation" +
                        " WHERE Exploitation.ID = '" + ID + "'; ";
            return query;
        }

        internal static bool CopyExploitation(string table, int idExpl, int newId)
        {
            bool CopyOk = true;
            try
            {
                string query = "";
                List<int> list = new List<int>();
                // In some tables the IdExploitations field has an 's' at the, in other it does not so 
                // I try both wihtout error message if it's the wrong choice
                try
                {
                    query = "Select * From " + table + " WHERE IdExploitations ='" + idExpl + "';";
                    list = SQlQueryExecuter.RunQueryReaderIntSilent("ID", query);
                }
                catch (Exception Ex)
                { }
                try
                {
                    if (list.Count == 0)
                    {
                        query = "Select * From " + table + " WHERE IdExploitation ='" + idExpl + "';";
                        list = SQlQueryExecuter.RunQueryReaderIntSilent("ID", query);
                    }
                }
                catch (Exception Ex)
                {}
                                
                if (list.Count == 0) return false;
                foreach (int id in list)
                {
                    query = "Select * From " + table + " WHERE ID ='" + id + "';";
                    string[] reader = SQlQueryExecuter.RunQueryReader(query);
                    int[] readerInt = Commun.CastStringArrayToInt(reader);
                    switch (table)
                    {

                        case "Caract_Exploitation":
                                query = "Insert Into " + table + " (IdExploitation,IdCharges,IdPeriode,IdActivite" +
                                    ",IdProduits,IdExternalites,NumVariante,IdFamily) VALUES ('" + newId + "','" + readerInt[3] + "','" +
                                    readerInt[4] + "','" + readerInt[5] + "','" + readerInt[6] + "','" + readerInt[7] + "','" +
                                    readerInt[8] + "','" + readerInt[9] + "');";
                            break;
                        case "Agri_Charges":
                                query = "Insert into " + table + " (IdExploitations,IdCharges,formule)" +
                                  " VALUES ('" + newId + "','" + readerInt[1] + "','" + reader[3] + "');"; 
                            break;
                        case "Agri_Produits":
                                query = "Insert into " + table + " (IdExploitations,IdProduits,formule)" +
                                 " VALUES ('" + newId + "','" + readerInt[1] + "','" + reader[3] + "');";
                            break;
                        case "Agri_Assol":

                            query = "Insert into " + table + " (IdExploitations,IdActivite)" +
                                 " VALUES ('" + newId + "','" + readerInt[2] + "');";
                            break;
                        case "Agri_Animaux":
                            query = "Insert into " + table + " (IdExploitations,IdActivite)" +
                                " VALUES ('" + newId + "','" + readerInt[2] + "');";
                            break;
                        case "Agri_Perenne":
                            query = "Insert into " + table + " (IdExploitations,IdActivite,AnPlant,AnArr,Surface)" +
                               " VALUES ('" + newId + "','" + readerInt[2] + "','" + reader[5] +
                               "','" + reader[6] + "','" + reader[7] + "');";
                            break;
                        case "Agri_Pluriannuelle":
                            query = "Insert into " + table + " (IdExploitations,IdActivite,AnPlant,AnArr,Surface)" +
                                " VALUES ('" + newId + "','" + readerInt[2] + "','" + reader[5] +
                                "','" + reader[6] + "','" + reader[7] + "');";
                            break;
                        case "Result_Calcul":
                            query = "Insert into " + table + " (IdExploitations,Table_Origine,Nom,Annee,Valeur)" +
                              " VALUES ('" + newId + "','" + reader[1] + "','" + reader[2] +
                              "','" + reader[3] + "','" + reader[4] + "');";
                            break;
                        case "SHP_Info":
                            query = "Insert into" + table + "(IdExploitation,MainMap,path,Nom,type,Position,Color_ARGB,Code_point)" +
                                " VALUES ('" + newId + "','" + reader[3] + "','" + reader[4] + "','" + reader[5] + "','" + reader[6] +
                                 "','" + reader[7] + "','" + reader[8] + "','" + reader[9] + "');";
                            break;
                        case "Agri_EmpCT":
                            query = "Insert into " + table + "(IdExploitation,Nom,Montant,Taux,Type,DateReal,DateRemb,Ent_Pri)"+
                                " VALUES ('" + newId + "','" + reader[2] + "','" + reader[3] + "','" + reader[4] + "','" + reader[5] +
                                 "','" + reader[6] + "','" + reader[8] + "');";
                            break;
                        case "Agri_EmpLT":
                            query = "Insert into " + table + "(IdExploitation,Nom,Montant,Duree1,Duree2,Taux1,Taux2,Type,DateReal" +
                                ",DateRemb,Ent_Pri,Nombre_Variation,Duree3,Duree4,Duree5,Taux3,Taux4,Taux5,Periodicite)" +
                                " VALUES ('" + newId + "','" + reader[2] + "','" + reader[3] + "','" + reader[4] + "','" + reader[5] + "','" +
                                 reader[6] + "','" + reader[7] + "','" + reader[8] + "','" + reader[9] + reader[10] + "','" +
                                 reader[11] + "','" + reader[12] + "','" + reader[13] + "','" + reader[14] + reader[15] + "','" +
                                 reader[16] + "','" + reader[17] + "','" + reader[18] + "','" + reader[19] + "');";
                            break;
                        case "Agri_DefSim":
                            query = "Insert into " + table + " (IdExploitations,An_0,NbAnSim,MDeb,AnCalage,TypeAlea" +
                                ",NoPrixProd,NoPrixCharge,NoPrixCharge,NoQProd,NoQCharge,NoQExt,Notes) VALUES ('" + newId + "','" 
                                + reader[2] + "','" + reader[3] + "','" + reader[4] + "','" + reader[5] + "','" + reader[6] + 
                                "','" + reader[7] + "','" + reader[8] + reader[9] + "','" + reader[11] + 
                                "','" + reader[12] + "');";
                            break;
                    }
                    SQlQueryExecuter.RunQuery(query);
                }
            }
            catch (Exception Ex)
            {
                MessageBox.Show(Ex.Message);
                Log.WriteLog(Ex.Message, ". Function :  " + System.Reflection.MethodBase.GetCurrentMethod().Name.ToString());
                CopyOk = false;
            }
            return CopyOk;
        }
    }
}
